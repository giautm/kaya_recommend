<?php
/**
 * @file
 * A description of what your module does.
 */

/**
 * Implements hook_schema().
 */
function kaya_recommend_schema() {
  $schema['recommend'] = [
    'description' => t('Lưu thông tin về các recommend đã được tạo.'),
    'fields' => [
      'entity_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t("Primary key: A unique ID for each recommend."),
      ],
      'user_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ],
      'user_email' => [
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
      ],
      'recv_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ],
      'recv_email' => [
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
      ],
      'created' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ],
      'changed' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ],
      'link' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'description' => t('Liên kết cần chuyển hướng đến.'),
      ],
      'site' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'description' => t("Site mà liên kết được tạo."),
      ],
      'sync' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ],
      'deleted' => [
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ],
    ],
    'primary key' => ['entity_id'],
  ];

  return $schema;
}

function kaya_recommend_cronapi($op, $job = NULL) {
  $items['_KAYA_recommend_fetch_extend_db_cron'] = [
    'description' => 'Load các recommend từ các db.',
    'rule' => '*/10 * * * *',
  ];
  return $items;
}

function _KAYA_recommend_fetch_extend_db_cron() {
  $connections = variable_get('kaya_recommend_extend_db', []);

  watchdog('recommend', 'List of all connections %conns', [
    '%conns' => print_r($connections, TRUE)
  ]);

  foreach ($connections as $key => $info) {
    watchdog('recommend', 'Database set active connection %key', ['%key' => $key]);

    Database::addConnectionInfo($key, 'default', $info);

    $conn = Database::getConnection('default', $key);

    $result = $conn->select('recommend', 'r')
      ->fields('r')
      ->condition('r.sync', NULL)
      ->execute();

    while ($item = $result->fetchAssoc()) {
      watchdog('recommend', 'syncing %id', ['%id' => $item['entity_id']]);

      $recommend = [
        'user_id' => $item['user_id'],
        'user_email' => $item['user_email'],
        'recv_id' => $item['recv_id'],
        'recv_email' => $item['recv_email'],
        'created' => $item['created'],
        'link' => $item['link'],
        'site' => $item['site'],
        'sync' => REQUEST_TIME,
      ];

      db_insert('recommend')
        ->fields($recommend)
        ->execute();

      $conn->update('recommend')
        ->fields($recommend)
        ->condition('entity_id', $item['entity_id'])
        ->execute();
    }
  }
}

/**
 * Implements hook_menu().
 */
function kaya_recommend_menu() {
  $items['admin/config/system/kaya_recommend'] = array(
    'title' => 'Kaya Recommend - Extended Database',
    'description' => 'Configuration for Kaya Recommend extended database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kaya_recommend_admin_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/kaya_recommend/delete/%/'] = array(
    'title' => 'Kaya Recommend - Extended Database, delete a config',
    'page callback' => 'kaya_recommend_remove_config',
    'page arguments' => array(5),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%/recommended'] = [
    'type' => MENU_LOCAL_TASK,
    'page callback' => '_KAYA_recommend_recommended_by_user',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'title' => 'Recommended',
  ];
  return $items;
}

function _KAYA_recommend_recommended_by_user($user_id) {
  global $user;
  $query = db_select('recommend', 'r')
    ->orderBy('created', 'DESC')// Default sort, not reflected in table. :/
    ->extend('PagerDefault')// Automagical pager
    ->fields('r', ['entity_id', 'site', 'recv_email', 'created', 'sync']);

  $query->condition('r.user_email', $user->mail);

  $result = $query->execute()->fetchAllAssoc('entity_id');

  $t = get_t();
  $render = [
    'wrapper' => [
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('table-responsive'),
      ),
      'recommended' => [
        '#attributes' => ['class' => ['table']],
        '#theme' => 'table',
        '#header' => [
          'entity_id' => ['data' => $t('ID'), 'field' => 'entity_id'],
          'site' => ['data' => $t('Site'), 'field' => 'site'],
          'recv_email' => ['data' => $t('Email'), 'field' => 'recv_email'],
          'created' => ['data' => $t('Created'), 'field' => 'created'],
          'synced' => ['data' => $t('Synced'), 'field' => 'sync'],
        ],
        '#rows' => array_map(function ($row) {
          $r = (array) $row;
          $r['created'] = format_date($r['created'], 'short');
          $r['sync'] = format_date($r['sync'], 'short');

          return $r;
        }, $result),
        '#sticky' => TRUE,
        '#empty' => t('No recommends recorded yet.'),
      ]
    ],
    'pager' => [
      '#theme' => 'pager',
    ],
  ];
//    return
//        "<div class='table-responsive'>" .
//        theme('table', [
//            'attributes' => ['class' => ['table']],
//            'header' => [$t('Site'), $t('Email'), $t('Time created')],
//            'rows' => $items
//        ]) .
//        "</div>";
  return $render;
}

function kaya_recommend_remove_config($key) {
  $default = [
    'database' => 'moodle',
    'username' => 'root',
    'password' => '',
    'host' => 'localhost',
    'port' => 3306,
    'driver' => 'mysql',
    'prefix' => 'mdl_',
  ];
  $config = variable_get('kaya_recommend_extend_db', [
    'KAYA_default' => $default
  ]);

  unset($config[$key]);
  variable_set('kaya_recommend_extend_db', $config);

  return '';
}

/**
 * Form builder; Create and display the Kaya Recommend
 * extended database configuration settings form.
 */
function kaya_recommend_admin_form($form, &$form_state) {
  $default = [
    'database' => 'moodle',
    'username' => 'root',
    'password' => '',
    'host' => 'localhost',
    'port' => 3306,
    'driver' => 'mysql',
    'prefix' => 'mdl_',
  ];

  $config = variable_get('kaya_recommend_extend_db', [
    'KAYA_default' => $default
  ]);

  $temp = [];
  foreach ($config as $key => $value) {
    $t = array_intersect_key($value, $default);;
    $t['key'] = $key;
    $temp[] = $t;
  }

  $form['table'] = [
    '#prefix' => '<div class="responsive-table">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => [
      'host' => ['data' => t('Host'), 'field' => 'host'],
      'port' => ['data' => t('Port'), 'field' => 'post'],
      'username' => ['data' => t('Username'), 'field' => 'username'],
      'password' => ['data' => t('Password'), 'field' => 'password'],
      'database' => ['data' => t('Database'), 'field' => 'database'],
      'prefix' => ['data' => t('Prefix'), 'field' => 'prefix'],
      'driver' => ['data' => t('Driver'), 'field' => 'driver'],
      'key' => ['data' => t('Key'), 'field' => 'key'],
    ],
    '#rows' => $temp,
  ];
  $form['host'] = [
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['host'],
  ];
  $form['port'] = [
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['port'],
  ];
  $form['username'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['username'],
  ];
  $form['password'] = [
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['password'],
  ];

  $form['database'] = [
    '#type' => 'textfield',
    '#title' => t('Database'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['database'],
  ];
  $form['prefix'] = [
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['prefix'],
  ];
  $form['driver'] = [
    '#type' => 'textfield',
    '#title' => t('Driver'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['driver'],
  ];
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save settings'),
  ];

  return $form;
}

/**
 */
function kaya_recommend_admin_form_submit($form, &$form_state) {
  watchdog('recommend', 'update config: %config', ['%config' => print_r($form_state['values'], TRUE)]);
  variable_set('kaya_recommend_extend_db', [
    'KAYA_default' => $form_state['values']
  ]);

  drupal_set_message(t('The settings have been saved'));
}

/**
 * Implements hook_block_info().
 */
function kaya_recommend_block_info() {
  $blocks['recommended_counts'] = [
    'info' => t('Recommended Count'),
    'region' => 'sidebar_second',
    'status' => TRUE,
    'weight' => 0,
    'visibility' => 0,
  ];

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function kaya_recommend_block_configure($delta) {
  $form = [];
  switch ($delta) {
    case 'recommended_counts':
      /*          $form['pending_comment_count'] = [
                      '#type' => 'textfield',
                      '#title' => t('Configure Number of Comments to Display'),
                      '#size' => 6,
                      '#description' => t('Enter the number of pending comments that will appear in the block.'),
                      '#default_value' => variable_get('pending_comment_count', 5),
                  ];
      */
      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function kaya_recommend_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'recommended_counts':
      //          variable_set('pending_comment_count', (int)$edit['pending_comment_count']);
      break;
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function kaya_recommend_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'recommended_counts':
      $block['subject'] = t('Recommended Count');
      $block['content'] = kaya_recommend_block_contents($delta);
      break;
  }

  return $block;
}

/**
 * A module-defined block content function.
 */
function kaya_recommend_block_contents($delta) {
  $contents = [];
  switch ($delta) {
    case 'recommended_counts':
      if (user_access('administer comments')) {
//                $results = db_query('select site, count(entity_id) as `nr` from {recommend} group by site'
//                    )->execute();
//
        $query = db_select('recommend', 'r')
          ->fields('r', ['site'])
          ->groupBy('r.site');
        $query->addExpression('count(r.entity_id)', 'ncount');

        global $user;
        $results = $query
          ->condition('r.user_email', $user->mail)
          ->execute();

        $items = [];
        while ($recommend = $results->fetchAssoc()) {
          $items[] = $recommend['site'] . ' - ' . $recommend['ncount'] . ' user(s)';
        }

        return [
          '#markup' => theme(
            'item_list',
            ['items' => $items]
          )
        ];
      }
      break;
  }
  return $contents;
}