<?php
/**
 * @file
 * A description of what your module does.
 */

/**
 * Implements hook_hook_info().
 */
function kaya_recommend_hook_info() {
  $hooks['block_info'] = [
    'group' => 'blocks'
  ];
  $hooks['block_configure'] = [
    'group' => 'blocks'
  ];
  $hooks['block_save'] = [
    'group' => 'blocks'
  ];
  $hooks['block_view'] = [
    'group' => 'blocks'
  ];

  return $hooks;
}

/**
 * Implements hook_permission().
 */
function kaya_recommend_permission() {
  $permissions['administer kaya recommend'] = [
    'title' => t('Administer Kaya Recommend'),
    'description' => t('Manage recommend from all users.'),
    'restrict access' => TRUE,
  ];

  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function kaya_recommend_entity_info() {
  $items['kaya_recommend'] = [
    'label' => t('Kaya - Recommend'),
    'base table' => 'recommend',
    // TODO: cập nhật thành kaya_recommend sau khi đổi tên table.
    'entity keys' => [
      'id' => 'entity_id',
      'label' => 'recv_name',
    ],
    'entity class' => 'RecommendEntity',
    'controller class' => 'RecommendEntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'kaya_recommend',
    'access callback' => '_kaya_recomend_recommend_access',
  ];

  return $items;
}


/**
 * Implements hook_cronapi().
 */
function kaya_recommend_cronapi($op, $job = NULL) {
  $items['_KAYA_recommend_fetch_extend_db_cron'] = [
    'description' => 'Load các recommend từ các db.',
    'rule' => '*/10 * * * *',
  ];
  return $items;
}

/**
 * Implements hook_menu().
 */
function kaya_recommend_menu() {
  $items['admin/config/system/kaya_recommend'] = array(
    'title' => 'Kaya Recommend - Extended Database',
    'description' => 'Configuration for Kaya Recommend extended database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kaya_recommend_admin_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/kaya_recommend/delete/%/'] = array(
    'title' => 'Kaya Recommend - Extended Database, delete a config',
    'page callback' => 'kaya_recommend_remove_config',
    'page arguments' => array(5),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%/recommended'] = [
    'type' => MENU_LOCAL_TASK,
    'page callback' => '_KAYA_recommend_recommended_by_user',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'title' => 'Recommended',
  ];
  return $items;
}

function _KAYA_recommend_recommended_by_user($user_id) {
  //return demo_view_project(1);
  global $user;
  $query = db_select('recommend', 'r')
    ->orderBy('created', 'DESC')// Default sort, not reflected in table. :/
    ->extend('PagerDefault')// Automagical pager
    ->fields('r', ['entity_id', 'site', 'recv_email', 'created', 'sync']);

  $query->condition('r.user_email', $user->mail);

  $result = $query->execute()->fetchAllAssoc('entity_id');

  $t = get_t();
  $render = [
    'wrapper' => [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['table-responsive'],
      ],
      'recommended' => [
        '#attributes' => ['class' => ['table']],
        '#theme' => 'table',
        '#header' => [
          'entity_id' => ['data' => $t('ID'), 'field' => 'entity_id'],
          'site' => ['data' => $t('Site'), 'field' => 'site'],
          'recv_email' => ['data' => $t('Email'), 'field' => 'recv_email'],
          'created' => ['data' => $t('Created'), 'field' => 'created'],
          'synced' => ['data' => $t('Synced'), 'field' => 'sync'],
        ],
        '#rows' => array_map(function ($row) {
          $r = (array) $row;
          $r['created'] = format_date($r['created'], 'short');
          $r['sync'] = format_date($r['sync'], 'short');

          return $r;
        }, $result),
        '#sticky' => TRUE,
        '#empty' => t('No recommends recorded yet.'),
      ]
    ],
    'pager' => [
      '#theme' => 'pager',
    ],
  ];

  return $render;
}

function kaya_recommend_remove_config($key) {
  $default = [
    'database' => 'moodle',
    'username' => 'root',
    'password' => '',
    'host' => 'localhost',
    'port' => 3306,
    'driver' => 'mysql',
    'prefix' => 'mdl_',
  ];
  $config = variable_get('kaya_recommend_extend_db', [
    'KAYA_default' => $default
  ]);

  unset($config[$key]);
  variable_set('kaya_recommend_extend_db', $config);

  return '';
}

/**
 * Form builder; Create and display the Kaya Recommend
 * extended database configuration settings form.
 */
function kaya_recommend_admin_form($form, &$form_state) {
  $default = [
    'database' => 'moodle',
    'username' => 'root',
    'password' => '',
    'host' => 'localhost',
    'port' => 3306,
    'driver' => 'mysql',
    'prefix' => 'mdl_',
  ];

  $config = variable_get('kaya_recommend_extend_db', [
    'KAYA_default' => $default
  ]);

  $temp = [];
  foreach ($config as $key => $value) {
    $t = array_intersect_key($value, $default);;
    $t['key'] = $key;
    $temp[] = $t;
  }

  $form['table'] = [
    '#prefix' => '<div class="responsive-table">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => [
      'host' => ['data' => t('Host'), 'field' => 'host'],
      'port' => ['data' => t('Port'), 'field' => 'post'],
      'username' => ['data' => t('Username'), 'field' => 'username'],
      'password' => ['data' => t('Password'), 'field' => 'password'],
      'database' => ['data' => t('Database'), 'field' => 'database'],
      'prefix' => ['data' => t('Prefix'), 'field' => 'prefix'],
      'driver' => ['data' => t('Driver'), 'field' => 'driver'],
      'key' => ['data' => t('Key'), 'field' => 'key'],
    ],
    '#rows' => $temp,
  ];
  $form['host'] = [
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['host'],
  ];
  $form['port'] = [
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['port'],
  ];
  $form['username'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['username'],
  ];
  $form['password'] = [
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['password'],
  ];

  $form['database'] = [
    '#type' => 'textfield',
    '#title' => t('Database'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['database'],
  ];
  $form['prefix'] = [
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['prefix'],
  ];
  $form['driver'] = [
    '#type' => 'textfield',
    '#title' => t('Driver'),
    '#description' => t(''),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#default_value' => $config['KAYA_default']['driver'],
  ];
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save settings'),
  ];

  return $form;
}

/**
 */
function kaya_recommend_admin_form_submit($form, &$form_state) {
  watchdog('recommend', 'update config: %config', ['%config' => print_r($form_state['values'], TRUE)]);
  variable_set('kaya_recommend_extend_db', [
    'KAYA_default' => $form_state['values']
  ]);

  drupal_set_message(t('The settings have been saved'));
}

function _KAYA_recommend_fetch_extend_db_cron() {
  $connections = variable_get('kaya_recommend_extend_db', []);

  watchdog('recommend', 'List of all connections %conns', [
    '%conns' => print_r($connections, TRUE)
  ]);

  foreach ($connections as $key => $info) {
    watchdog('recommend', 'Database set active connection %key', ['%key' => $key]);

    Database::addConnectionInfo($key, 'default', $info);

    $conn = Database::getConnection('default', $key);

    $result = $conn->select('recommend', 'r')
      ->fields('r')
      ->condition('r.sync', NULL)
      ->execute();

    while ($item = $result->fetchAssoc()) {
      watchdog('recommend', 'syncing %id', ['%id' => $item['entity_id']]);

      $recommend = [
        'user_id' => $item['user_id'],
        'user_email' => $item['user_email'],
        'recv_id' => $item['recv_id'],
        'recv_email' => $item['recv_email'],
        'created' => $item['created'],
        'link' => $item['link'],
        'site' => $item['site'],
        'sync' => REQUEST_TIME,
      ];

      db_insert('recommend')
        ->fields($recommend)
        ->execute();

      $conn->update('recommend')
        ->fields($recommend)
        ->condition('entity_id', $item['entity_id'])
        ->execute();
    }
  }
}

/**
 * Access control for kaya_recommend_recommend entities.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param object $entity
 *   Optionally an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @param string $entity_type
 *   The entity type of the entity to check for.
 *
 * @see entity_access()
 *
 * @return bool
 *   TRUE if access is granted, FALSE otherwise.
 */
function _kaya_recomend_recommend_access($op, $entity, $account, $entity_type) {
  // TODO: Code phần kiểm tra truy cập người dùng.
  // Chỉ có administer Kaya recommend hoặc API mới được 'thêm', 'sửa', 'xóa',
  // Chúng ta không cho phép người dùng thêm, sửa hoặc xóa một recommend.
  //  if (in_array($op, ['view', 'create', 'update', 'delete'])) {
  //    return TRUE;
  //  }
  //
  //  return user_access('administer kaya recommend', $account);
  return TRUE;
}

